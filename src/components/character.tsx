/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public\models\character.glb -o src\components\character.tsx -t 
*/

import * as THREE from 'three'
import React, { useEffect, useMemo, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useCharacterAnimations } from '@/context/AnimationContext'

type GLTFResult = GLTF & {
  nodes: {
    skillBall: THREE.Mesh
    Cube006: THREE.Mesh
    Cube006_1: THREE.Mesh
    Cube002: THREE.Mesh
    Cube002_1: THREE.Mesh
    Chair: THREE.Mesh
    Cube007: THREE.Mesh
    Cube007_1: THREE.Mesh
    Cylinder008: THREE.Mesh
    Cylinder008_1: THREE.Mesh
    Cylinder008_2: THREE.Mesh
    Keyboard: THREE.Mesh
    Cube004: THREE.Mesh
    Cube004_1: THREE.Mesh
    Cube063: THREE.SkinnedMesh
    Cube063_1: THREE.SkinnedMesh
    Cube063_2: THREE.SkinnedMesh
    Cube033: THREE.SkinnedMesh
    Cube033_1: THREE.SkinnedMesh
    Adventurer_Hair: THREE.SkinnedMesh
    Cube039: THREE.SkinnedMesh
    Cube039_1: THREE.SkinnedMesh
    Cube039_2: THREE.SkinnedMesh
    Cube040: THREE.SkinnedMesh
    Cube040_1: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
    ball: THREE.Bone
    Table: THREE.Bone
  }
  materials: {
    Black: THREE.MeshStandardMaterial
    Grey: THREE.MeshStandardMaterial
    Hands: THREE.MeshStandardMaterial
    Wood: THREE.MeshStandardMaterial
    White: THREE.MeshStandardMaterial
    Screen: THREE.MeshStandardMaterial
    Skin: THREE.MeshStandardMaterial
    Suit: THREE.MeshStandardMaterial
    Shirt: THREE.MeshStandardMaterial
    Shoes: THREE.MeshStandardMaterial
    Shoes1: THREE.MeshStandardMaterial
    Hair: THREE.MeshStandardMaterial
    Eyebrows: THREE.MeshStandardMaterial
    Eye: THREE.MeshStandardMaterial
    Pants: THREE.MeshStandardMaterial
    Pants2: THREE.MeshStandardMaterial
  }
}

type ActionName = 'dancing' | 'idle' | 'magic' | 'sitToStand' | 'sitToStandOld' | 'standToSit' | 'standToSitOld' | 'tPose' | 'typing'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

interface MyGLTFResult extends GLTFResult {
  animations: GLTFAction[];
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh'] | JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export default function Character(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null!)
  const { nodes, materials, animations } = useGLTF('models/character.glb') as MyGLTFResult
  const { actions, names, clips, mixer } = useAnimations(animations, group)
  const [currentAction, setCurrentAction] = useState<ActionName>('magic')
  const [hover, setHover] = useState(false)
  const materialToon = useMemo(() => new THREE.MeshToonMaterial({
    color: "#6633ff",
    side: THREE.BackSide,
  }), []);
  const { animation: selectedAnimation, changeCurrentAnimation } = useCharacterAnimations() 
  nodes.skillBall.material = materialToon
  mixer.addEventListener("finished",(e)=>{
    if(e.action._clip.name == "magic"){
      actions.magic?.stop()
      actions.magic?.play()
      setCurrentAction("magic")
    } else if(e.action._clip.name == "standToSit") {
      actions.standToSit?.stop()
      actions.typing?.play()
      setCurrentAction("typing")
    } else if(e.action._clip.name == "typing") {
      actions.typing?.stop()
      actions.typing?.play()
      setCurrentAction("typing")
    } else if(e.action._clip.name == "sitToStand") {
      actions.sitToStand?.stop()
      actions.dancing?.play()
      changeCurrentAnimation()
      setCurrentAction("dancing")
    } else if(e.action._clip.name == "dancing") {
      actions.dancing?.stop()
      actions.dancing?.play()
      setCurrentAction("dancing")
    }
  })
  useEffect(()=>{
    names.forEach((name) => {
      actions[name]?.setLoop(THREE.LoopOnce,1)
    })
    actions.magic?.play()
    
  },[])

  function changeAnimation(){
    console.log("Current Action: ",currentAction, "Context Animation: ",selectedAnimation)

    if(currentAction == "typing"){
      actions.typing?.stop()
      actions.sitToStand?.play()
      return
    }
    if(currentAction == "sitToStand" || currentAction == "standToSit") return
    
    mixer.stopAllAction()
    changeCurrentAnimation()
    switch (selectedAnimation) {
      case "dance":
        actions.dancing?.play()
        setCurrentAction("dancing")
        break;
      case "magic":
        actions.magic?.play()
        setCurrentAction("magic")
        break;
      case "type":
        actions.standToSit?.play()
        setCurrentAction("standToSit")
        break;
    }
  }
  
  return (
    
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh 
          onPointerOver={e => {
            e.stopPropagation()
            setHover(true)
            document.body.style.cursor = "pointer"
          }} 
          onPointerOut={e => {
            e.stopPropagation()
            setHover(false)
            document.body.style.cursor = "default"
          }} 
          onClick={() => changeAnimation()}
          position={[0,1,0]}>
          <sphereGeometry args={[1.9,16]}/>
          <meshToonMaterial color={hover ? '#ec13e8' : "#8e0b8b"} side={THREE.BackSide}/>
        </mesh>
        <group name="characterRig" rotation={[Math.PI / 2, 0, 0]} scale={0.012}>
          <primitive object={nodes.mixamorigHips} />
          <primitive object={nodes.ball} />
          <primitive object={nodes.Table} />
          <group name="Adventurer_Body">
            <skinnedMesh name="Cube063" geometry={nodes.Cube063.geometry} material={materials.Skin} skeleton={nodes.Cube063.skeleton} />
            <skinnedMesh name="Cube063_1" geometry={nodes.Cube063_1.geometry} material={materials.Suit} skeleton={nodes.Cube063_1.skeleton} />
            <skinnedMesh name="Cube063_2" geometry={nodes.Cube063_2.geometry} material={materials.Shirt} skeleton={nodes.Cube063_2.skeleton} />
          </group>
          <group name="Adventurer_Feet">
            <skinnedMesh name="Cube033" geometry={nodes.Cube033.geometry} material={materials.Shoes} skeleton={nodes.Cube033.skeleton} />
            <skinnedMesh name="Cube033_1" geometry={nodes.Cube033_1.geometry} material={materials.Shoes1} skeleton={nodes.Cube033_1.skeleton} />
          </group>
          <skinnedMesh name="Adventurer_Hair" geometry={nodes.Adventurer_Hair.geometry} material={materials.Hair} skeleton={nodes.Adventurer_Hair.skeleton} />
          <group name="Adventurer_Head">
            <skinnedMesh name="Cube039" geometry={nodes.Cube039.geometry} material={materials.Skin} skeleton={nodes.Cube039.skeleton} />
            <skinnedMesh name="Cube039_1" geometry={nodes.Cube039_1.geometry} material={materials.Eyebrows} skeleton={nodes.Cube039_1.skeleton} />
            <skinnedMesh name="Cube039_2" geometry={nodes.Cube039_2.geometry} material={materials.Eye} skeleton={nodes.Cube039_2.skeleton} />
          </group>
          <group name="Adventurer_Legs">
            <skinnedMesh name="Cube040" geometry={nodes.Cube040.geometry} material={materials.Pants} skeleton={nodes.Cube040.skeleton} />
            <skinnedMesh name="Cube040_1" geometry={nodes.Cube040_1.geometry} material={materials.Pants2} skeleton={nodes.Cube040_1.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
}



useGLTF.preload('models/character.glb')
