/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public\models\quomeda.glb -o src\components\scenes\quomeda.tsx -t 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, PerspectiveCamera, Float } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { SVG3DModel } from '../models/loader'

type GLTFResult = GLTF & {
  nodes: {
    Plane002: THREE.Mesh
    Pie: THREE.Mesh
    Bars: THREE.Mesh
    Line: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
    ['Material.004']: THREE.MeshStandardMaterial
    Red: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Quomeda(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models/quomeda.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <ambientLight intensity={1} />
      <directionalLight position={[0, 10, 0]} intensity={.5} />
      <PerspectiveCamera makeDefault={true} far={1000} near={0.1} fov={22.895} position={[15.236, 7.892, -7.724]} rotation={[-2.612, 1.2, 2.642]} />
      <mesh geometry={nodes.Plane002.geometry}>
        <meshBasicMaterial color={"#fff"} />
      </mesh>
      <mesh geometry={nodes.Pie.geometry} material={materials['Material.001']} position={[-11.635, 0.219, -3.633]} rotation={[0, -1.004, 0]} />
      <Float>
        <mesh geometry={nodes.Bars.geometry} material={materials['Material.004']} position={[-7.24, 1.445, 7.557]} rotation={[0.14, -0.157, 0.42]} scale={0.771} />
      </Float>
      <Float>
        <mesh geometry={nodes.Line.geometry} material={materials.Red} position={[-10.353, 1.985, 3.372]} rotation={[0.039, 0.258, 0.316]} scale={0.534} />
      </Float>
      <Float>
        <SVG3DModel rotation={[0,3.14/2,0]} position={[-3,3,-1]} path="/icons/quomeda.svg"/>
      </Float>
    </group>
  )
}

useGLTF.preload('/models/quomeda.glb')
