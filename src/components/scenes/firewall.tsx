/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public\models\firewall.glb -o src\components\scenes\firewall.tsx -t 
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, PerspectiveCamera, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Door_1: THREE.Mesh
    PaperBad: THREE.Mesh
    PaperGood: THREE.Mesh
    Tick_1: THREE.Mesh
    Cube: THREE.Mesh
    Server: THREE.Mesh
    Plane: THREE.Mesh
    Door: THREE.Bone
    Plane_Bad: THREE.Bone
    Bone: THREE.Bone
    Tick: THREE.Bone
  }
  materials: {
    PaperBad: THREE.MeshStandardMaterial
    PaperGood: THREE.MeshStandardMaterial
    Server: THREE.MeshStandardMaterial
    PlaneMaterial: THREE.MeshStandardMaterial
  }
}

type ActionName = 'Firewall'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

interface MyGLTFResult extends GLTFResult {
  animations: GLTFAction[];
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh'] | JSX.IntrinsicElements['bone']>>

export function FireWall(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null!)
  const { nodes, materials, animations } = useGLTF('/models/firewall.glb') as MyGLTFResult
  const { actions, mixer } = useAnimations(animations, group)
  mixer.addEventListener("finished",(e)=>{
    if(e.action._clip.name == "Firewall"){
      actions.Firewall?.stop()
      actions.Firewall?.play()
    }
  })
  useEffect(()=>{
    actions.Firewall?.play()
  },[])
  return (
    <group ref={group} {...props} dispose={null}>
      <ambientLight intensity={1} />
      <directionalLight position={[10, 10, -10]} rotation={[3,3,4]} intensity={4} />
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Door} />
          <primitive object={nodes.Plane_Bad} />
          <primitive object={nodes.Bone} />
          <primitive object={nodes.Tick} />
        </group>
        <PerspectiveCamera name="Camera" makeDefault={true} far={1000} near={0.1} fov={22.895} position={[36.269, 14.448, -13.016]} rotation={[-2.429, 1.145, 2.475]} />
        <mesh name="Cube" geometry={nodes.Cube.geometry} material={nodes.Cube.material} />
        <mesh name="Server" geometry={nodes.Server.geometry} material={materials.Server} position={[0.547, 0, 10.809]} />
        <mesh name="Plane" geometry={nodes.Plane.geometry} material={materials.PlaneMaterial} position={[0, 0, 2.943]} scale={100} />
      </group>
    </group>
  )
}

useGLTF.preload('/models/firewall.glb')
