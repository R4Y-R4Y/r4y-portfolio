/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public\models\character.glb -o src\components\character.tsx -t 
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube063: THREE.SkinnedMesh
    Cube063_1: THREE.SkinnedMesh
    Cube063_2: THREE.SkinnedMesh
    Cube033: THREE.SkinnedMesh
    Cube033_1: THREE.SkinnedMesh
    Adventurer_Hair: THREE.SkinnedMesh
    Cube039: THREE.SkinnedMesh
    Cube039_1: THREE.SkinnedMesh
    Cube039_2: THREE.SkinnedMesh
    Cube040: THREE.SkinnedMesh
    Cube040_1: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
  }
  materials: {
    Skin: THREE.MeshStandardMaterial
    Suit: THREE.MeshStandardMaterial
    Shirt: THREE.MeshStandardMaterial
    Shoes: THREE.MeshStandardMaterial
    Shoes1: THREE.MeshStandardMaterial
    Hair: THREE.MeshStandardMaterial
    Eyebrows: THREE.MeshStandardMaterial
    Eye: THREE.MeshStandardMaterial
    Pants: THREE.MeshStandardMaterial
    Pants2: THREE.MeshStandardMaterial
  }
}

type ActionName = 'standToSit' | 'typeToSit' | 'sitToType' | 'magic' | 'typing' | 'tPose' | 'sitToStand'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

interface MyGLTFResult extends GLTFResult {
  animations: GLTFAction[];
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function Character(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null!)
  const { nodes, materials, animations } = useGLTF('models/character.glb') as MyGLTFResult
  const { actions, mixer } = useAnimations(animations, group)

  useEffect(()=>{
    actions.magic?.play()
  },[])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="characterRig" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <group name="Adventurer_Body">
            <skinnedMesh name="Cube063" geometry={nodes.Cube063.geometry} material={materials.Skin} skeleton={nodes.Cube063.skeleton} />
            <skinnedMesh name="Cube063_1" geometry={nodes.Cube063_1.geometry} material={materials.Suit} skeleton={nodes.Cube063_1.skeleton} />
            <skinnedMesh name="Cube063_2" geometry={nodes.Cube063_2.geometry} material={materials.Shirt} skeleton={nodes.Cube063_2.skeleton} />
          </group>
          <group name="Adventurer_Feet">
            <skinnedMesh name="Cube033" geometry={nodes.Cube033.geometry} material={materials.Shoes} skeleton={nodes.Cube033.skeleton} />
            <skinnedMesh name="Cube033_1" geometry={nodes.Cube033_1.geometry} material={materials.Shoes1} skeleton={nodes.Cube033_1.skeleton} />
          </group>
          <skinnedMesh name="Adventurer_Hair" geometry={nodes.Adventurer_Hair.geometry} material={materials.Hair} skeleton={nodes.Adventurer_Hair.skeleton} />
          <group name="Adventurer_Head">
            <skinnedMesh name="Cube039" geometry={nodes.Cube039.geometry} material={materials.Skin} skeleton={nodes.Cube039.skeleton} />
            <skinnedMesh name="Cube039_1" geometry={nodes.Cube039_1.geometry} material={materials.Eyebrows} skeleton={nodes.Cube039_1.skeleton} />
            <skinnedMesh name="Cube039_2" geometry={nodes.Cube039_2.geometry} material={materials.Eye} skeleton={nodes.Cube039_2.skeleton} />
          </group>
          <group name="Adventurer_Legs">
            <skinnedMesh name="Cube040" geometry={nodes.Cube040.geometry} material={materials.Pants} skeleton={nodes.Cube040.skeleton} />
            <skinnedMesh name="Cube040_1" geometry={nodes.Cube040_1.geometry} material={materials.Pants2} skeleton={nodes.Cube040_1.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('models/character.glb')

export default Character